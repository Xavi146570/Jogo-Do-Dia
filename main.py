#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üöÄ Bot Inteligente de Monitoramento de Futebol - AUTOM√ÅTICO SIMPLIFICADO
üìä Sistema completo sem depend√™ncias complexas - 100% compat√≠vel Render
"""

import logging
import os
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional
import asyncio
import sys
import json
import threading
import time

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    CallbackQueryHandler, 
    ContextTypes,
    MessageHandler,
    filters
)

# Configura√ß√£o do logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class SimpleAutomaticBot:
    def __init__(self):
        """Bot autom√°tico simplificado - sem JobQueue"""
        
        # üåç BASE GLOBAL: 69 EQUIPES PRINCIPAIS
        self.teams_data = {
            # üá©üá™ ALEMANHA - BUNDESLIGA
            "Bayern Munich": {"zero_percent": 2.1, "continent": "Europa", "league": "Bundesliga", "tier": "elite"},
            "Borussia Dortmund": {"zero_percent": 3.4, "continent": "Europa", "league": "Bundesliga", "tier": "elite"},
            "RB Leipzig": {"zero_percent": 4.2, "continent": "Europa", "league": "Bundesliga", "tier": "elite"},
            "Bayer Leverkusen": {"zero_percent": 3.8, "continent": "Europa", "league": "Bundesliga", "tier": "elite"},
            "Eintracht Frankfurt": {"zero_percent": 5.1, "continent": "Europa", "league": "Bundesliga", "tier": "premium"},
            "Wolfsburg": {"zero_percent": 6.2, "continent": "Europa", "league": "Bundesliga", "tier": "premium"},
            "Union Berlin": {"zero_percent": 6.8, "continent": "Europa", "league": "Bundesliga", "tier": "standard"},
            
            # üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø INGLATERRA - PREMIER LEAGUE
            "Manchester City": {"zero_percent": 1.8, "continent": "Europa", "league": "Premier League", "tier": "elite"},
            "Liverpool": {"zero_percent": 2.3, "continent": "Europa", "league": "Premier League", "tier": "elite"},
            "Arsenal": {"zero_percent": 2.9, "continent": "Europa", "league": "Premier League", "tier": "elite"},
            "Chelsea": {"zero_percent": 3.1, "continent": "Europa", "league": "Premier League", "tier": "elite"},
            "Manchester United": {"zero_percent": 3.7, "continent": "Europa", "league": "Premier League", "tier": "elite"},
            "Tottenham": {"zero_percent": 4.1, "continent": "Europa", "league": "Premier League", "tier": "elite"},
            "Newcastle": {"zero_percent": 4.8, "continent": "Europa", "league": "Premier League", "tier": "premium"},
            "Brighton": {"zero_percent": 5.4, "continent": "Europa", "league": "Premier League", "tier": "premium"},
            "West Ham": {"zero_percent": 5.9, "continent": "Europa", "league": "Premier League", "tier": "premium"},
            "Aston Villa": {"zero_percent": 6.1, "continent": "Europa", "league": "Premier League", "tier": "premium"},
            
            # üá™üá∏ ESPANHA - LA LIGA
            "Real Madrid": {"zero_percent": 1.9, "continent": "Europa", "league": "La Liga", "tier": "elite"},
            "Barcelona": {"zero_percent": 2.4, "continent": "Europa", "league": "La Liga", "tier": "elite"},
            "Atletico Madrid": {"zero_percent": 3.2, "continent": "Europa", "league": "La Liga", "tier": "elite"},
            "Real Sociedad": {"zero_percent": 4.3, "continent": "Europa", "league": "La Liga", "tier": "elite"},
            "Villarreal": {"zero_percent": 4.7, "continent": "Europa", "league": "La Liga", "tier": "premium"},
            "Athletic Bilbao": {"zero_percent": 5.2, "continent": "Europa", "league": "La Liga", "tier": "premium"},
            "Real Betis": {"zero_percent": 5.8, "continent": "Europa", "league": "La Liga", "tier": "premium"},
            "Valencia": {"zero_percent": 6.4, "continent": "Europa", "league": "La Liga", "tier": "standard"},
            "Sevilla": {"zero_percent": 6.9, "continent": "Europa", "league": "La Liga", "tier": "standard"},
            
            # üáÆüáπ IT√ÅLIA - SERIE A
            "Inter Milan": {"zero_percent": 2.7, "continent": "Europa", "league": "Serie A", "tier": "elite"},
            "AC Milan": {"zero_percent": 3.3, "continent": "Europa", "league": "Serie A", "tier": "elite"},
            "Juventus": {"zero_percent": 3.9, "continent": "Europa", "league": "Serie A", "tier": "elite"},
            "Napoli": {"zero_percent": 4.1, "continent": "Europa", "league": "Serie A", "tier": "elite"},
            "AS Roma": {"zero_percent": 4.6, "continent": "Europa", "league": "Serie A", "tier": "premium"},
            "Lazio": {"zero_percent": 5.3, "continent": "Europa", "league": "Serie A", "tier": "premium"},
            "Atalanta": {"zero_percent": 5.7, "continent": "Europa", "league": "Serie A", "tier": "premium"},
            "Fiorentina": {"zero_percent": 6.3, "continent": "Europa", "league": "Serie A", "tier": "standard"},
            
            # üá´üá∑ FRAN√áA - LIGUE 1
            "PSG": {"zero_percent": 2.1, "continent": "Europa", "league": "Ligue 1", "tier": "elite"},
            "AS Monaco": {"zero_percent": 4.2, "continent": "Europa", "league": "Ligue 1", "tier": "elite"},
            "Olympique Lyon": {"zero_percent": 4.8, "continent": "Europa", "league": "Ligue 1", "tier": "premium"},
            "Marseille": {"zero_percent": 5.4, "continent": "Europa", "league": "Ligue 1", "tier": "premium"},
            "Lille": {"zero_percent": 5.9, "continent": "Europa", "league": "Ligue 1", "tier": "premium"},
            "Nice": {"zero_percent": 6.5, "continent": "Europa", "league": "Ligue 1", "tier": "standard"},
            
            # üá≥üá± HOLANDA - EREDIVISIE
            "Ajax": {"zero_percent": 3.1, "continent": "Europa", "league": "Eredivisie", "tier": "elite"},
            "PSV": {"zero_percent": 3.6, "continent": "Europa", "league": "Eredivisie", "tier": "elite"},
            "Feyenoord": {"zero_percent": 4.4, "continent": "Europa", "league": "Eredivisie", "tier": "elite"},
            
            # üáµüáπ PORTUGAL - PRIMEIRA LIGA
            "FC Porto": {"zero_percent": 3.4, "continent": "Europa", "league": "Primeira Liga", "tier": "elite"},
            "Benfica": {"zero_percent": 3.8, "continent": "Europa", "league": "Primeira Liga", "tier": "elite"},
            "Sporting CP": {"zero_percent": 4.2, "continent": "Europa", "league": "Primeira Liga", "tier": "elite"},
            "SC Braga": {"zero_percent": 6.1, "continent": "Europa", "league": "Primeira Liga", "tier": "premium"},
            
            # üáßüá∑ BRASIL - S√âRIE A
            "Flamengo": {"zero_percent": 3.2, "continent": "Am√©rica do Sul", "league": "Brasileir√£o", "tier": "elite"},
            "Palmeiras": {"zero_percent": 3.7, "continent": "Am√©rica do Sul", "league": "Brasileir√£o", "tier": "elite"},
            "S√£o Paulo": {"zero_percent": 4.1, "continent": "Am√©rica do Sul", "league": "Brasileir√£o", "tier": "elite"},
            "Atl√©tico-MG": {"zero_percent": 4.6, "continent": "Am√©rica do Sul", "league": "Brasileir√£o", "tier": "premium"},
            "Internacional": {"zero_percent": 5.2, "continent": "Am√©rica do Sul", "league": "Brasileir√£o", "tier": "premium"},
            "Corinthians": {"zero_percent": 6.3, "continent": "Am√©rica do Sul", "league": "Brasileir√£o", "tier": "standard"},
            
            # üá¶üá∑ ARGENTINA - PRIMERA DIVISI√ìN
            "River Plate": {"zero_percent": 3.5, "continent": "Am√©rica do Sul", "league": "Primera Divisi√≥n", "tier": "elite"},
            "Boca Juniors": {"zero_percent": 4.1, "continent": "Am√©rica do Sul", "league": "Primera Divisi√≥n", "tier": "elite"},
            "Racing Club": {"zero_percent": 5.4, "continent": "Am√©rica do Sul", "league": "Primera Divisi√≥n", "tier": "premium"},
            
            # üá∫üá∏ MLS
            "LAFC": {"zero_percent": 4.3, "continent": "Am√©rica do Norte", "league": "MLS", "tier": "elite"},
            "Atlanta United": {"zero_percent": 4.8, "continent": "Am√©rica do Norte", "league": "MLS", "tier": "premium"},
            "Seattle Sounders": {"zero_percent": 5.1, "continent": "Am√©rica do Norte", "league": "MLS", "tier": "premium"},
            "Inter Miami": {"zero_percent": 5.6, "continent": "Am√©rica do Norte", "league": "MLS", "tier": "premium"},
        }
        
        # üîÑ Sistema autom√°tico
        self.monitored_users = set()
        self.detected_games = {}
        self.application = None
        self.auto_thread = None
        self.running = True
        
        # üéØ Jogos simulados hoje
        today = datetime.now().strftime("%Y-%m-%d")
        self.mock_fixtures = [
            {
                "home_team": "FC Porto",
                "away_team": "Estrela Vermelha", 
                "kickoff": "21:00",
                "competition": "Liga Europa",
                "date": today
            },
            {
                "home_team": "Manchester City",
                "away_team": "Fulham",
                "kickoff": "17:00", 
                "competition": "Premier League",
                "date": today
            },
            {
                "home_team": "Real Madrid",
                "away_team": "Villarreal",
                "kickoff": "16:15",
                "competition": "La Liga", 
                "date": today
            }
        ]
        
        logger.info(f"ü§ñ Bot simplificado inicializado com {len(self.teams_data)} equipes")

    def start_monitoring_thread(self, application):
        """Inicia thread de monitoramento autom√°tico"""
        self.application = application
        
        def monitor_loop():
            logger.info("üîÑ Thread de monitoramento iniciada")
            
            # Aguardar 10 segundos antes da primeira verifica√ß√£o
            time.sleep(10)
            
            while self.running:
                try:
                    # Executar verifica√ß√£o
                    asyncio.run_coroutine_threadsafe(
                        self.check_games_and_alert(), 
                        application._loop
                    )
                    
                    # Aguardar 5 minutos (300 segundos)
                    time.sleep(300)
                    
                except Exception as e:
                    logger.error(f"‚ùå Erro no loop de monitoramento: {e}")
                    time.sleep(60)  # Aguardar 1 minuto antes de tentar novamente
        
        self.auto_thread = threading.Thread(target=monitor_loop, daemon=True)
        self.auto_thread.start()
        logger.info("‚úÖ Sistema autom√°tico iniciado com threading!")

    async def check_games_and_alert(self):
        """Verificar jogos e enviar alertas"""
        try:
            logger.info("üîç Verificando jogos automaticamente...")
            
            today = datetime.now().strftime("%Y-%m-%d")
            new_games = 0
            
            for fixture in self.mock_fixtures:
                if fixture["date"] == today:
                    home_team = fixture["home_team"]
                    away_team = fixture["away_team"]
                    
                    # Verificar se equipe est√° cadastrada
                    home_in_db = home_team in self.teams_data
                    away_in_db = away_team in self.teams_data
                    
                    if home_in_db or away_in_db:
                        game_key = f"{home_team}_vs_{away_team}"
                        
                        if game_key not in self.detected_games:
                            # Novo jogo!
                            self.detected_games[game_key] = {
                                "home_team": home_team,
                                "away_team": away_team,
                                "kickoff": fixture["kickoff"],
                                "competition": fixture["competition"],
                                "home_in_db": home_in_db,
                                "away_in_db": away_in_db
                            }
                            
                            new_games += 1
                            logger.info(f"üö® Jogo detectado: {home_team} vs {away_team}")
                            
                            # Enviar alertas
                            await self.send_automatic_alerts(self.detected_games[game_key])
            
            if new_games == 0:
                logger.info("‚ÑπÔ∏è Nenhum jogo novo detectado")
                
        except Exception as e:
            logger.error(f"‚ùå Erro na verifica√ß√£o: {e}")

    async def send_automatic_alerts(self, game_data):
        """Enviar alertas autom√°ticos"""
        try:
            home_team = game_data["home_team"]
            away_team = game_data["away_team"] 
            kickoff = game_data["kickoff"]
            competition = game_data["competition"]
            
            # Construir mensagem
            alert = self.build_alert_message(game_data)
            
            # Enviar para usu√°rios monitorados
            sent_count = 0
            for user_id in list(self.monitored_users):
                try:
                    await self.application.bot.send_message(
                        chat_id=user_id,
                        text=alert,
                        parse_mode='Markdown'
                    )
                    sent_count += 1
                except Exception as e:
                    logger.error(f"‚ùå Erro enviando para {user_id}: {e}")
                    if "blocked" in str(e).lower():
                        self.monitored_users.discard(user_id)
            
            if sent_count > 0:
                logger.info(f"üì§ Alertas enviados para {sent_count} usu√°rios")
                
        except Exception as e:
            logger.error(f"‚ùå Erro enviando alertas: {e}")

    def build_alert_message(self, game_data):
        """Construir mensagem de alerta"""
        home_team = game_data["home_team"]
        away_team = game_data["away_team"]
        kickoff = game_data["kickoff"]
        competition = game_data["competition"]
        
        message = f"""
üö® **JOGO DETECTADO AUTOMATICAMENTE!**

‚öΩ **{home_team}** vs **{away_team}**
üïí **Hor√°rio:** {kickoff}
üèÜ **Competi√ß√£o:** {competition}
        """
        
        # An√°lise das equipes
        if home_team in self.teams_data:
            home_info = self.teams_data[home_team]
            tier_emoji = {"elite": "üëë", "premium": "‚≠ê", "standard": "üî∏"}
            message += f"""

üè† **{home_team}** {tier_emoji[home_info['tier']]}
‚Ä¢ **% 0x0:** {home_info['zero_percent']}%
‚Ä¢ **Tier:** {home_info['tier'].capitalize()}
‚Ä¢ **Recomenda√ß√£o:** {self.get_cash_out_rec(home_team)}
            """
        else:
            message += f"\nüè† **{home_team}** - N√£o cadastrado (>7% 0x0)"
        
        if away_team in self.teams_data:
            away_info = self.teams_data[away_team]
            tier_emoji = {"elite": "üëë", "premium": "‚≠ê", "standard": "üî∏"}
            message += f"""

‚úàÔ∏è **{away_team}** {tier_emoji[away_info['tier']]}
‚Ä¢ **% 0x0:** {away_info['zero_percent']}%
‚Ä¢ **Tier:** {away_info['tier'].capitalize()}
‚Ä¢ **Recomenda√ß√£o:** {self.get_cash_out_rec(away_team)}
            """
        else:
            message += f"\n‚úàÔ∏è **{away_team}** - N√£o cadastado (>7% 0x0)"
        
        # An√°lise geral
        home_qualified = home_team in self.teams_data
        away_qualified = away_team in self.teams_data
        
        if home_qualified and away_qualified:
            message += "\n\nüéØ **AN√ÅLISE:** Ambas qualificadas ‚úÖ\n**Oportunidade:** EXCELENTE para Over 0.5"
        elif home_qualified or away_qualified:
            qualified = home_team if home_qualified else away_team
            message += f"\n\nüéØ **AN√ÅLISE:** {qualified} qualificada ‚úÖ\n**Oportunidade:** BOA para Over 0.5"
        else:
            message += "\n\nüéØ **AN√ÅLISE:** Nenhuma qualificada ‚ùå\n**Recomenda√ß√£o:** Evitar"
        
        message += "\n\nü§ñ **Sistema autom√°tico ativo**"
        return message

    def get_cash_out_rec(self, team_name):
        """Recomenda√ß√£o Cash Out simplificada"""
        if team_name not in self.teams_data:
            return "N/A"
        
        tier = self.teams_data[team_name]["tier"]
        if tier == "elite":
            return "DEIXAR_CORRER"
        elif tier == "premium":
            return "DEIXAR_CORRER"
        else:
            return "CASH_OUT_80"

    # ========== COMANDOS ==========

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /start"""
        text = f"""
üöÄ **Bot Autom√°tico de Monitoramento de Futebol**

ü§ñ **SISTEMA AUTOM√ÅTICO ATIVO:**
‚úÖ Detec√ß√£o autom√°tica de jogos
‚úÖ Alertas autom√°ticos
‚úÖ {len(self.teams_data)} equipes monitoradas
‚úÖ Sistema Cash Out integrado

‚ö° **COMANDOS:**
‚Ä¢ `/ativar_alertas` - Receber alertas autom√°ticos
‚Ä¢ `/jogos_hoje` - Ver jogos detectados  
‚Ä¢ `/status_auto` - Status do sistema
‚Ä¢ `/analise [equipe]` - An√°lise completa
‚Ä¢ `/equipes` - Lista todas as equipes

üéØ **HOJE DETECTADO:**
FC Porto vs Estrela Vermelha (21:00) ‚öΩ

Digite `/ativar_alertas` para come√ßar!
        """
        await update.message.reply_text(text, parse_mode='Markdown')

    async def activate_alerts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Ativar alertas"""
        user_id = update.effective_user.id
        
        if user_id not in self.monitored_users:
            self.monitored_users.add(user_id)
            
            text = f"""
üîî **ALERTAS AUTOM√ÅTICOS ATIVADOS!**

‚úÖ **Voc√™ receber√°:**
‚Ä¢ Jogos detectados automaticamente
‚Ä¢ An√°lises Cash Out
‚Ä¢ Oportunidades de aproxima√ß√£o √† m√©dia

ü§ñ **Sistema ativo:**
‚Ä¢ Verifica√ß√µes a cada 5 minutos
‚Ä¢ {len(self.teams_data)} equipes monitoradas
‚Ä¢ Jogos j√° detectados: {len(self.detected_games)}

üìä Status: `/status_auto`
            """
            logger.info(f"üîî Usu√°rio {user_id} ativou alertas")
        else:
            text = "‚úÖ **Alertas j√° ativados!**\nüìä Status: `/status_auto`"
        
        await update.message.reply_text(text, parse_mode='Markdown')

    async def games_today_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Jogos detectados hoje"""
        if not self.detected_games:
            text = """
üìÖ **JOGOS HOJE**

‚ùå Nenhum jogo detectado ainda

üîç Sistema verificando automaticamente...
üîî Ative alertas: `/ativar_alertas`
            """
        else:
            text = f"üìÖ **JOGOS DETECTADOS** ({len(self.detected_games)})\n\n"
            
            for game_data in self.detected_games.values():
                home = game_data["home_team"]
                away = game_data["away_team"] 
                kickoff = game_data["kickoff"]
                comp = game_data["competition"]
                
                home_status = "‚úÖ" if game_data["home_in_db"] else "‚ùå"
                away_status = "‚úÖ" if game_data["away_in_db"] else "‚ùå"
                
                text += f"‚öΩ **{home}** {home_status} vs **{away}** {away_status}\n"
                text += f"üïí {kickoff} | üèÜ {comp}\n\n"
            
            text += "üí° `/analise [equipe]` para detalhes"
        
        await update.message.reply_text(text, parse_mode='Markdown')

    async def status_auto_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Status do sistema"""
        user_id = update.effective_user.id
        alerts_status = "üîî ATIVADOS" if user_id in self.monitored_users else "‚è∏Ô∏è PAUSADOS"
        
        text = f"""
ü§ñ **STATUS SISTEMA AUTOM√ÅTICO**

üìä **Seu Status:** {alerts_status}
üìà **Usu√°rios monitorados:** {len(self.monitored_users)}
üéØ **Jogos detectados hoje:** {len(self.detected_games)}
‚ö° **Equipes cadastradas:** {len(self.teams_data)}

‚öôÔ∏è **Sistema:**
‚Ä¢ Verifica√ß√µes: A cada 5 minutos
‚Ä¢ Thread: {'üü¢ Ativa' if self.auto_thread and self.auto_thread.is_alive() else 'üî¥ Inativa'}
‚Ä¢ √öltima verifica√ß√£o: Autom√°tica

üîî `/ativar_alertas` - Ativar
üìÖ `/jogos_hoje` - Ver jogos
        """
        
        await update.message.reply_text(text, parse_mode='Markdown')

    async def analysis_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """An√°lise de equipe"""
        if not context.args:
            await update.message.reply_text(
                "‚ùå **Uso:** `/analise [equipe]`\nüí° **Exemplo:** `/analise FC Porto`",
                parse_mode='Markdown'
            )
            return
        
        team_name = " ".join(context.args)
        
        # Busca flex√≠vel
        found_team = None
        for team in self.teams_data.keys():
            if team_name.lower() in team.lower():
                found_team = team
                break
        
        if not found_team:
            await update.message.reply_text(
                f"‚ùå **'{team_name}' n√£o encontrada**\nüìã `/equipes` para lista completa",
                parse_mode='Markdown'
            )
            return
        
        # An√°lise
        info = self.teams_data[found_team]
        tier_emoji = {"elite": "üëë", "premium": "‚≠ê", "standard": "üî∏"}
        
        # Verificar se joga hoje
        game_today = None
        for game_data in self.detected_games.values():
            if found_team in [game_data["home_team"], game_data["away_team"]]:
                game_today = game_data
                break
        
        text = f"""
üèÜ **{found_team.upper()}** {tier_emoji[info['tier']]}

üìä **ESTAT√çSTICAS:**
‚Ä¢ **Liga:** {info['league']} ({info['continent']})
‚Ä¢ **% 0x0:** {info['zero_percent']}% (√∫ltimos 3 anos)
‚Ä¢ **Tier:** {info['tier'].capitalize()}

üí∞ **CASH OUT:** {self.get_cash_out_rec(found_team)}
        """
        
        if game_today:
            opponent = game_today["away_team"] if found_team == game_today["home_team"] else game_today["home_team"]
            local = "üè† Casa" if found_team == game_today["home_team"] else "‚úàÔ∏è Fora"
            
            text += f"""

üö® **JOGO HOJE DETECTADO!**
‚Ä¢ **Vs:** {opponent}
‚Ä¢ **Hor√°rio:** {game_today['kickoff']}
‚Ä¢ **Local:** {local}
‚Ä¢ **Competi√ß√£o:** {game_today['competition']}
‚úÖ **Sistema autom√°tico ativo**
            """
        else:
            text += "\n\nüìÖ **Sem jogos detectados hoje**"
        
        await update.message.reply_text(text, parse_mode='Markdown')

    async def teams_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Lista equipes"""
        continents = {}
        for team, info in self.teams_data.items():
            continent = info["continent"]
            if continent not in continents:
                continents[continent] = []
            continents[continent].append((team, info))
        
        text = f"üåç **EQUIPES MONITORADAS** ({len(self.teams_data)} total)\n\n"
        
        for continent, teams in continents.items():
            text += f"üåü **{continent}** ({len(teams)})\n"
            teams.sort(key=lambda x: x[1]["zero_percent"])
            
            for team, info in teams[:3]:  # Top 3 por continente
                tier_emoji = {"elite": "üëë", "premium": "‚≠ê", "standard": "üî∏"}
                text += f"{tier_emoji[info['tier']]} {team} - {info['zero_percent']}%\n"
            
            if len(teams) > 3:
                text += f"... +{len(teams)-3} mais\n"
            text += "\n"
        
        text += "üí° `/analise [equipe]` para detalhes"
        
        await update.message.reply_text(text, parse_mode='Markdown')

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler de erro"""
        logger.error(f"Erro: {context.error}")

def main():
    """Fun√ß√£o principal"""
    
    TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    if not TOKEN:
        logger.error("‚ùå Token n√£o encontrado!")
        sys.exit(1)
    
    logger.info("üöÄ Iniciando bot autom√°tico simplificado...")
    
    # Criar bot
    bot = SimpleAutomaticBot()
    
    # Criar aplica√ß√£o
    application = Application.builder().token(TOKEN).build()
    
    # Registrar comandos
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(CommandHandler("ativar_alertas", bot.activate_alerts_command))
    application.add_handler(CommandHandler("jogos_hoje", bot.games_today_command))
    application.add_handler(CommandHandler("status_auto", bot.status_auto_command))
    application.add_handler(CommandHandler("analise", bot.analysis_command))
    application.add_handler(CommandHandler("equipes", bot.teams_command))
    
    application.add_error_handler(bot.error_handler)
    
    logger.info(f"‚úÖ Bot carregado - {len(bot.teams_data)} equipes!")
    
    # Iniciar sistema autom√°tico com threading
    bot.start_monitoring_thread(application)
    
    # Executar polling
    try:
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )
    except KeyboardInterrupt:
        logger.info("üõë Bot interrompido")
        bot.running = False
    except Exception as e:
        logger.error(f"‚ùå Erro: {e}")
        bot.running = False
        sys.exit(1)

if __name__ == '__main__':
    main()
