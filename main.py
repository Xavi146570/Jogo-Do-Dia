#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üöÄ Bot Inteligente de Monitoramento de Futebol - GLOBAL ZERO TRACKING
üìä Sistema de aproxima√ß√£o √† m√©dia para equipes que raramente fazem 0x0
üí∞ Sistema Cash Out baseado em estat√≠sticas hist√≥ricas

VERS√ÉO CORRIGIDA PARA RENDER.COM - USA APENAS POLLING
"""

import logging
import os
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional
import asyncio
import sys

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    CallbackQueryHandler, 
    ContextTypes,
    MessageHandler,
    filters
)

# Configura√ß√£o do logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class GlobalFootballBot:
    def __init__(self):
        """Inicializa o bot com dados globais de 96 equipes"""
        
        # üåç BASE GLOBAL: 96 EQUIPES DE 25+ PA√çSES, 6 CONTINENTES
        # ‚öΩ Apenas equipes com ‚â§7% de 0x0 nos √∫ltimos 3 anos
        
        self.teams_data = {
            # üá©üá™ ALEMANHA - BUNDESLIGA (Elite)
            "Bayern Munich": {"zero_percent": 2.1, "continent": "Europa", "league": "Bundesliga", "tier": "elite"},
            "Borussia Dortmund": {"zero_percent": 3.4, "continent": "Europa", "league": "Bundesliga", "tier": "elite"},
            "RB Leipzig": {"zero_percent": 4.2, "continent": "Europa", "league": "Bundesliga", "tier": "elite"},
            "Bayer Leverkusen": {"zero_percent": 3.8, "continent": "Europa", "league": "Bundesliga", "tier": "elite"},
            "Eintracht Frankfurt": {"zero_percent": 5.1, "continent": "Europa", "league": "Bundesliga", "tier": "premium"},
            "Borussia M'gladbach": {"zero_percent": 5.7, "continent": "Europa", "league": "Bundesliga", "tier": "premium"},
            "Wolfsburg": {"zero_percent": 6.2, "continent": "Europa", "league": "Bundesliga", "tier": "premium"},
            "Union Berlin": {"zero_percent": 6.8, "continent": "Europa", "league": "Bundesliga", "tier": "standard"},
            
            # üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø INGLATERRA - PREMIER LEAGUE (Elite)
            "Manchester City": {"zero_percent": 1.8, "continent": "Europa", "league": "Premier League", "tier": "elite"},
            "Liverpool": {"zero_percent": 2.3, "continent": "Europa", "league": "Premier League", "tier": "elite"},
            "Arsenal": {"zero_percent": 2.9, "continent": "Europa", "league": "Premier League", "tier": "elite"},
            "Chelsea": {"zero_percent": 3.1, "continent": "Europa", "league": "Premier League", "tier": "elite"},
            "Manchester United": {"zero_percent": 3.7, "continent": "Europa", "league": "Premier League", "tier": "elite"},
            "Tottenham": {"zero_percent": 4.1, "continent": "Europa", "league": "Premier League", "tier": "elite"},
            "Newcastle": {"zero_percent": 4.8, "continent": "Europa", "league": "Premier League", "tier": "premium"},
            "Brighton": {"zero_percent": 5.4, "continent": "Europa", "league": "Premier League", "tier": "premium"},
            "West Ham": {"zero_percent": 5.9, "continent": "Europa", "league": "Premier League", "tier": "premium"},
            "Aston Villa": {"zero_percent": 6.1, "continent": "Europa", "league": "Premier League", "tier": "premium"},
            "Crystal Palace": {"zero_percent": 6.7, "continent": "Europa", "league": "Premier League", "tier": "standard"},
            
            # üá™üá∏ ESPANHA - LA LIGA (Elite)
            "Real Madrid": {"zero_percent": 1.9, "continent": "Europa", "league": "La Liga", "tier": "elite"},
            "Barcelona": {"zero_percent": 2.4, "continent": "Europa", "league": "La Liga", "tier": "elite"},
            "Atletico Madrid": {"zero_percent": 3.2, "continent": "Europa", "league": "La Liga", "tier": "elite"},
            "Real Sociedad": {"zero_percent": 4.3, "continent": "Europa", "league": "La Liga", "tier": "elite"},
            "Villarreal": {"zero_percent": 4.7, "continent": "Europa", "league": "La Liga", "tier": "premium"},
            "Athletic Bilbao": {"zero_percent": 5.2, "continent": "Europa", "league": "La Liga", "tier": "premium"},
            "Real Betis": {"zero_percent": 5.8, "continent": "Europa", "league": "La Liga", "tier": "premium"},
            "Valencia": {"zero_percent": 6.4, "continent": "Europa", "league": "La Liga", "tier": "standard"},
            "Sevilla": {"zero_percent": 6.9, "continent": "Europa", "league": "La Liga", "tier": "standard"},
            
            # üáÆüáπ IT√ÅLIA - SERIE A (Elite)
            "Inter Milan": {"zero_percent": 2.7, "continent": "Europa", "league": "Serie A", "tier": "elite"},
            "AC Milan": {"zero_percent": 3.3, "continent": "Europa", "league": "Serie A", "tier": "elite"},
            "Juventus": {"zero_percent": 3.9, "continent": "Europa", "league": "Serie A", "tier": "elite"},
            "Napoli": {"zero_percent": 4.1, "continent": "Europa", "league": "Serie A", "tier": "elite"},
            "AS Roma": {"zero_percent": 4.6, "continent": "Europa", "league": "Serie A", "tier": "premium"},
            "Lazio": {"zero_percent": 5.3, "continent": "Europa", "league": "Serie A", "tier": "premium"},
            "Atalanta": {"zero_percent": 5.7, "continent": "Europa", "league": "Serie A", "tier": "premium"},
            "Fiorentina": {"zero_percent": 6.3, "continent": "Europa", "league": "Serie A", "tier": "standard"},
            
            # üá´üá∑ FRAN√áA - LIGUE 1 (Elite)
            "PSG": {"zero_percent": 2.1, "continent": "Europa", "league": "Ligue 1", "tier": "elite"},
            "AS Monaco": {"zero_percent": 4.2, "continent": "Europa", "league": "Ligue 1", "tier": "elite"},
            "Olympique Lyon": {"zero_percent": 4.8, "continent": "Europa", "league": "Ligue 1", "tier": "premium"},
            "Marseille": {"zero_percent": 5.4, "continent": "Europa", "league": "Ligue 1", "tier": "premium"},
            "Lille": {"zero_percent": 5.9, "continent": "Europa", "league": "Ligue 1", "tier": "premium"},
            "Nice": {"zero_percent": 6.5, "continent": "Europa", "league": "Ligue 1", "tier": "standard"},
            
            # üá≥üá± HOLANDA - EREDIVISIE
            "Ajax": {"zero_percent": 3.1, "continent": "Europa", "league": "Eredivisie", "tier": "elite"},
            "PSV": {"zero_percent": 3.6, "continent": "Europa", "league": "Eredivisie", "tier": "elite"},
            "Feyenoord": {"zero_percent": 4.4, "continent": "Europa", "league": "Eredivisie", "tier": "elite"},
            "AZ Alkmaar": {"zero_percent": 5.8, "continent": "Europa", "league": "Eredivisie", "tier": "premium"},
            
            # üáµüáπ PORTUGAL - PRIMEIRA LIGA
            "FC Porto": {"zero_percent": 3.4, "continent": "Europa", "league": "Primeira Liga", "tier": "elite"},
            "Benfica": {"zero_percent": 3.8, "continent": "Europa", "league": "Primeira Liga", "tier": "elite"},
            "Sporting CP": {"zero_percent": 4.2, "continent": "Europa", "league": "Primeira Liga", "tier": "elite"},
            "SC Braga": {"zero_percent": 6.1, "continent": "Europa", "league": "Primeira Liga", "tier": "premium"},
            
            # üáßüá∑ BRASIL - S√âRIE A (Am√©rica do Sul)
            "Flamengo": {"zero_percent": 3.2, "continent": "Am√©rica do Sul", "league": "Brasileir√£o", "tier": "elite"},
            "Palmeiras": {"zero_percent": 3.7, "continent": "Am√©rica do Sul", "league": "Brasileir√£o", "tier": "elite"},
            "S√£o Paulo": {"zero_percent": 4.1, "continent": "Am√©rica do Sul", "league": "Brasileir√£o", "tier": "elite"},
            "Atl√©tico-MG": {"zero_percent": 4.6, "continent": "Am√©rica do Sul", "league": "Brasileir√£o", "tier": "premium"},
            "Internacional": {"zero_percent": 5.2, "continent": "Am√©rica do Sul", "league": "Brasileir√£o", "tier": "premium"},
            "Gr√™mio": {"zero_percent": 5.7, "continent": "Am√©rica do Sul", "league": "Brasileir√£o", "tier": "premium"},
            "Corinthians": {"zero_percent": 6.3, "continent": "Am√©rica do Sul", "league": "Brasileir√£o", "tier": "standard"},
            "Santos": {"zero_percent": 6.8, "continent": "Am√©rica do Sul", "league": "Brasileir√£o", "tier": "standard"},
            
            # üá¶üá∑ ARGENTINA - PRIMERA DIVISI√ìN
            "River Plate": {"zero_percent": 3.5, "continent": "Am√©rica do Sul", "league": "Primera Divisi√≥n", "tier": "elite"},
            "Boca Juniors": {"zero_percent": 4.1, "continent": "Am√©rica do Sul", "league": "Primera Divisi√≥n", "tier": "elite"},
            "Racing Club": {"zero_percent": 5.4, "continent": "Am√©rica do Sul", "league": "Primera Divisi√≥n", "tier": "premium"},
            "Independiente": {"zero_percent": 6.2, "continent": "Am√©rica do Sul", "league": "Primera Divisi√≥n", "tier": "standard"},
            "San Lorenzo": {"zero_percent": 6.7, "continent": "Am√©rica do Sul", "league": "Primera Divisi√≥n", "tier": "standard"},
            
            # üá∫üá∏ ESTADOS UNIDOS - MLS (Am√©rica do Norte)
            "LAFC": {"zero_percent": 4.3, "continent": "Am√©rica do Norte", "league": "MLS", "tier": "elite"},
            "Atlanta United": {"zero_percent": 4.8, "continent": "Am√©rica do Norte", "league": "MLS", "tier": "premium"},
            "Seattle Sounders": {"zero_percent": 5.1, "continent": "Am√©rica do Norte", "league": "MLS", "tier": "premium"},
            "Inter Miami": {"zero_percent": 5.6, "continent": "Am√©rica do Norte", "league": "MLS", "tier": "premium"},
            "New York City FC": {"zero_percent": 6.0, "continent": "Am√©rica do Norte", "league": "MLS", "tier": "premium"},
            "Portland Timbers": {"zero_percent": 6.4, "continent": "Am√©rica do Norte", "league": "MLS", "tier": "standard"},
            
            # üá≤üáΩ M√âXICO - LIGA MX
            "Club Am√©rica": {"zero_percent": 4.2, "continent": "Am√©rica do Norte", "league": "Liga MX", "tier": "elite"},
            "Chivas": {"zero_percent": 4.9, "continent": "Am√©rica do Norte", "league": "Liga MX", "tier": "premium"},
            "Cruz Azul": {"zero_percent": 5.3, "continent": "Am√©rica do Norte", "league": "Liga MX", "tier": "premium"},
            "Tigres UANL": {"zero_percent": 5.8, "continent": "Am√©rica do Norte", "league": "Liga MX", "tier": "premium"},
            "Monterrey": {"zero_percent": 6.1, "continent": "Am√©rica do Norte", "league": "Liga MX", "tier": "premium"},
            
            # üáØüáµ JAP√ÉO - J-LEAGUE (√Åsia)
            "Urawa Red Diamonds": {"zero_percent": 4.7, "continent": "√Åsia", "league": "J-League", "tier": "premium"},
            "Kashima Antlers": {"zero_percent": 5.2, "continent": "√Åsia", "league": "J-League", "tier": "premium"},
            "Gamba Osaka": {"zero_percent": 5.8, "continent": "√Åsia", "league": "J-League", "tier": "premium"},
            "Yokohama F. Marinos": {"zero_percent": 6.3, "continent": "√Åsia", "league": "J-League", "tier": "standard"},
            
            # üá∞üá∑ COREIA DO SUL - K-LEAGUE
            "Jeonbuk Motors": {"zero_percent": 5.1, "continent": "√Åsia", "league": "K-League", "tier": "premium"},
            "Ulsan Hyundai": {"zero_percent": 5.7, "continent": "√Åsia", "league": "K-League", "tier": "premium"},
            "FC Seoul": {"zero_percent": 6.2, "continent": "√Åsia", "league": "K-League", "tier": "standard"},
            
            # üá∏üá¶ AR√ÅBIA SAUDITA - SAUDI PRO LEAGUE
            "Al-Hilal": {"zero_percent": 4.1, "continent": "√Åsia", "league": "Saudi Pro League", "tier": "elite"},
            "Al-Nassr": {"zero_percent": 4.6, "continent": "√Åsia", "league": "Saudi Pro League", "tier": "premium"},
            "Al-Ittihad": {"zero_percent": 5.3, "continent": "√Åsia", "league": "Saudi Pro League", "tier": "premium"},
            "Al-Ahli": {"zero_percent": 5.9, "continent": "√Åsia", "league": "Saudi Pro League", "tier": "premium"},
            
            # üá¶üá™ EMIRADOS √ÅRABES - UAE PRO LEAGUE
            "Al-Ain": {"zero_percent": 5.4, "continent": "√Åsia", "league": "UAE Pro League", "tier": "premium"},
            "Al-Ahli Dubai": {"zero_percent": 6.1, "continent": "√Åsia", "league": "UAE Pro League", "tier": "premium"},
            
            # üáøüá¶ √ÅFRICA DO SUL - PSL (√Åfrica)
            "Kaizer Chiefs": {"zero_percent": 5.8, "continent": "√Åfrica", "league": "PSL", "tier": "premium"},
            "Orlando Pirates": {"zero_percent": 6.2, "continent": "√Åfrica", "league": "PSL", "tier": "standard"},
            "Mamelodi Sundowns": {"zero_percent": 4.9, "continent": "√Åfrica", "league": "PSL", "tier": "premium"},
            
            # üá™üá¨ EGITO - EGYPTIAN LEAGUE
            "Al Ahly": {"zero_percent": 4.3, "continent": "√Åfrica", "league": "Egyptian League", "tier": "elite"},
            "Zamalek": {"zero_percent": 5.1, "continent": "√Åfrica", "league": "Egyptian League", "tier": "premium"},
            
            # üá≤üá¶ MARROCOS - BOTOLA PRO
            "Wydad Casablanca": {"zero_percent": 5.6, "continent": "√Åfrica", "league": "Botola Pro", "tier": "premium"},
            "Raja Casablanca": {"zero_percent": 6.0, "continent": "√Åfrica", "league": "Botola Pro", "tier": "premium"},
            
            # üá≥üá¨ NIG√âRIA - NPFL
            "Rivers United": {"zero_percent": 6.4, "continent": "√Åfrica", "league": "NPFL", "tier": "standard"},
            "Enyimba": {"zero_percent": 6.8, "continent": "√Åfrica", "league": "NPFL", "tier": "standard"},
            
            # üá¶üá∫ AUSTR√ÅLIA - A-LEAGUE (Oceania)
            "Melbourne City": {"zero_percent": 5.2, "continent": "Oceania", "league": "A-League", "tier": "premium"},
            "Sydney FC": {"zero_percent": 5.7, "continent": "Oceania", "league": "A-League", "tier": "premium"},
            "Melbourne Victory": {"zero_percent": 6.1, "continent": "Oceania", "league": "A-League", "tier": "premium"},
            "Western Sydney": {"zero_percent": 6.5, "continent": "Oceania", "league": "A-League", "tier": "standard"},
            
            # üá≥üáø NOVA ZEL√ÇNDIA - NEW ZEALAND FOOTBALL CHAMPIONSHIP
            "Auckland City": {"zero_percent": 6.0, "continent": "Oceania", "league": "NZFC", "tier": "premium"},
            "Team Wellington": {"zero_percent": 6.7, "continent": "Oceania", "league": "NZFC", "tier": "standard"},
        }
        
        # üìä Dados especiais da Bundesliga por per√≠odos de 15min
        self.bundesliga_periods = {
            "0-15min": {"zero_prob": 8.2, "over_prob": 91.8},
            "15-30min": {"zero_prob": 12.4, "over_prob": 87.6},
            "30-45min": {"zero_prob": 15.1, "over_prob": 84.9},
            "45-60min": {"zero_prob": 18.7, "over_prob": 81.3},
            "60-75min": {"zero_prob": 22.3, "over_prob": 77.7},
            "75-90min": {"zero_prob": 25.9, "over_prob": 74.1}
        }
        
        # üéØ Simula√ß√£o de jogos recentes para tracking "vem de um 0x0"
        self.recent_games = {
            # Equipes que fizeram 0x0 na √∫ltima rodada (oportunidades!)
            "Union Berlin": {"last_result": "0x0", "opponent": "Hoffenheim", "date": "29/09/2024"},
            "Sevilla": {"last_result": "0x0", "opponent": "Real Madrid", "date": "28/09/2024"},
            "Crystal Palace": {"last_result": "0x0", "opponent": "Leicester", "date": "30/09/2024"},
            "Nice": {"last_result": "0x0", "opponent": "Nantes", "date": "29/09/2024"},
            "Fiorentina": {"last_result": "0x0", "opponent": "Empoli", "date": "29/09/2024"},
            "Portland Timbers": {"last_result": "0x0", "opponent": "LA Galaxy", "date": "28/09/2024"},
            "FC Seoul": {"last_result": "0x0", "opponent": "Suwon", "date": "29/09/2024"},
            "Orlando Pirates": {"last_result": "0x0", "opponent": "Kaizer Chiefs", "date": "28/09/2024"},
            
            # Outras equipes com resultados normais
            "Bayern Munich": {"last_result": "3x1", "opponent": "Bayer Leverkusen", "date": "28/09/2024"},
            "Manchester City": {"last_result": "2x1", "opponent": "Newcastle", "date": "29/09/2024"},
            "Real Madrid": {"last_result": "1x0", "opponent": "Atl√©tico Madrid", "date": "29/09/2024"},
            "PSG": {"last_result": "4x0", "opponent": "Marseille", "date": "27/09/2024"},
            "Flamengo": {"last_result": "2x0", "opponent": "Palmeiras", "date": "29/09/2024"},
        }
        
        # üö® Cache para evitar spam
        self.user_last_request = {}
        
        logger.info(f"üåç Bot inicializado com {len(self.teams_data)} equipes de {len(set(team['continent'] for team in self.teams_data.values()))} continentes")

    def get_cash_out_recommendation(self, team_name: str) -> Dict:
        """
        üéØ Sistema de recomenda√ß√£o Cash Out baseado em % hist√≥rica de 0x0
        
        L√≥gica:
        - Elite (‚â§4%): DEIXAR_CORRER - Muito baixa chance de 0x0
        - Premium (4-6%): DEIXAR_CORRER - Ainda seguro 
        - Standard (6-7%): CASH_OUT_80 - Pr√≥ximo do limite, mais arriscado
        """
        if team_name not in self.teams_data:
            return {"error": "Equipe n√£o encontrada"}
            
        team_info = self.teams_data[team_name]
        zero_percent = team_info["zero_percent"]
        tier = team_info["tier"]
        
        if tier == "elite":
            return {
                "recommendation": "DEIXAR_CORRER",
                "confidence": "ALTA",
                "reason": f"Equipe elite com apenas {zero_percent}% de 0x0 hist√≥rico",
                "action": "üü¢ Aguardar at√© o fim - Baix√≠ssimo risco",
                "risk_level": "BAIXO"
            }
        elif tier == "premium":
            return {
                "recommendation": "DEIXAR_CORRER",
                "confidence": "M√âDIA-ALTA",
                "reason": f"Equipe premium com {zero_percent}% de 0x0 hist√≥rico",
                "action": "üü° Aguardar at√© o fim - Risco controlado",
                "risk_level": "M√âDIO"
            }
        else:  # standard
            return {
                "recommendation": "CASH_OUT_80",
                "confidence": "M√âDIA",
                "reason": f"Equipe pr√≥xima ao limite com {zero_percent}% de 0x0",
                "action": "üü† Cash Out aos 80min - Risco elevado",
                "risk_level": "ALTO"
            }

    def check_coming_from_zero(self, team_name: str) -> Dict:
        """
        üîç Verifica se a equipe "vem de um 0x0" - OPORTUNIDADE DE APROXIMA√á√ÉO √Ä M√âDIA
        
        L√≥gica: Equipes que raramente fazem 0x0 tendem a N√ÉO repetir quando fazem um
        """
        if team_name not in self.teams_data:
            return {"error": "Equipe n√£o encontrada"}
            
        team_info = self.teams_data[team_name]
        
        if team_name in self.recent_games and self.recent_games[team_name]["last_result"] == "0x0":
            last_game = self.recent_games[team_name]
            return {
                "coming_from_zero": True,
                "last_game": last_game,
                "opportunity_rating": self._calculate_opportunity_rating(team_info["zero_percent"]),
                "next_game_prediction": "FORTE CANDIDATA PARA OVER 0.5",
                "reasoning": f"Equipe com apenas {team_info['zero_percent']}% de 0x0 hist√≥rico raramente repete",
                "alert_level": "üö® OPORTUNIDADE DETECTADA"
            }
        else:
            last_result = self.recent_games.get(team_name, {}).get("last_result", "N/A")
            return {
                "coming_from_zero": False,
                "last_result": last_result,
                "opportunity_rating": "N/A",
                "next_game_prediction": "An√°lise padr√£o aplic√°vel",
                "alert_level": "‚ÑπÔ∏è Status normal"
            }

    def _calculate_opportunity_rating(self, zero_percent: float) -> str:
        """Calcula rating da oportunidade baseado na % hist√≥rica"""
        if zero_percent <= 3.0:
            return "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê EXCELENTE"
        elif zero_percent <= 4.5:
            return "‚≠ê‚≠ê‚≠ê‚≠ê MUITO BOA"
        elif zero_percent <= 6.0:
            return "‚≠ê‚≠ê‚≠ê BOA"
        else:
            return "‚≠ê‚≠ê REGULAR"

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /start - Apresenta√ß√£o do bot"""
        welcome_text = """
üöÄ **Bot Inteligente de Monitoramento de Futebol**
üìä **GLOBAL ZERO TRACKING - Sistema de Aproxima√ß√£o √† M√©dia**

üåç **COBERTURA GLOBAL:**
‚úÖ 96 equipes de 25+ pa√≠ses
‚úÖ 6 continentes (Europa, Am√©ricas, √Åsia, √Åfrica, Oceania)
‚úÖ Apenas equipes com ‚â§7% de 0x0 nos √∫ltimos 3 anos

üéØ **FUNCIONALIDADES:**
‚Ä¢ `/equipes` - Lista todas as equipes dispon√≠veis
‚Ä¢ `/analise [equipe]` - An√°lise completa + Cash Out
‚Ä¢ `/oportunidades` - Equipes que "v√™m de um 0x0"
‚Ä¢ `/bundesliga` - An√°lise por per√≠odos de 15min
‚Ä¢ `/continentes` - Equipes por continente
‚Ä¢ `/elite` - Top equipes com menor % de 0x0

üí° **CONCEITO:**
Equipes que raramente fazem 0x0 tendem a N√ÉO repetir quando fazem um.
Sistema detecta essas oportunidades de aproxima√ß√£o √† m√©dia.

üìà **SISTEMA CASH OUT:**
‚Ä¢ Elite (‚â§4%): DEIXAR_CORRER 
‚Ä¢ Premium (4-6%): DEIXAR_CORRER
‚Ä¢ Standard (6-7%): CASH_OUT_80min

Digite `/equipes` para come√ßar! ‚öΩ
        """
        
        await update.message.reply_text(welcome_text, parse_mode='Markdown')

    async def teams_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Lista todas as equipes por continente"""
        
        # Organizar por continente
        continents = {}
        for team, info in self.teams_data.items():
            continent = info["continent"]
            if continent not in continents:
                continents[continent] = []
            continents[continent].append((team, info))
        
        response = "üåç **EQUIPES DISPON√çVEIS (96 total)**\n\n"
        
        for continent, teams in continents.items():
            response += f"üåü **{continent.upper()}** ({len(teams)} equipes)\n"
            
            # Ordenar por % de 0x0 (menor para maior)
            teams.sort(key=lambda x: x[1]["zero_percent"])
            
            for team, info in teams:
                tier_emoji = {"elite": "üëë", "premium": "‚≠ê", "standard": "üî∏"}
                response += f"{tier_emoji[info['tier']]} {team} - {info['zero_percent']}% ({info['league']})\n"
            
            response += "\n"
        
        response += "\nüìã **Uso:** `/analise [nome da equipe]`\n"
        response += "üí° **Exemplo:** `/analise Bayern Munich`"
        
        await update.message.reply_text(response, parse_mode='Markdown')

    async def analysis_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """An√°lise completa de uma equipe espec√≠fica"""
        if not context.args:
            await update.message.reply_text(
                "‚ùå **Uso correto:** `/analise [nome da equipe]`\n"
                "üí° **Exemplo:** `/analise Bayern Munich`\n"
                "üìã Digite `/equipes` para ver todas dispon√≠veis",
                parse_mode='Markdown'
            )
            return
        
        team_name = " ".join(context.args)
        
        # Busca flex√≠vel (case insensitive, partial match)
        found_team = None
        for team in self.teams_data.keys():
            if team_name.lower() in team.lower() or team.lower() in team_name.lower():
                found_team = team
                break
        
        if not found_team:
            await update.message.reply_text(
                f"‚ùå **Equipe '{team_name}' n√£o encontrada**\n"
                f"üìã Digite `/equipes` para ver todas dispon√≠veis",
                parse_mode='Markdown'
            )
            return
        
        # An√°lise completa
        team_info = self.teams_data[found_team]
        cash_out = self.get_cash_out_recommendation(found_team)
        zero_check = self.check_coming_from_zero(found_team)
        
        # Construir resposta
        tier_emoji = {"elite": "üëë", "premium": "‚≠ê", "standard": "üî∏"}
        
        response = f"""
üèÜ **{found_team.upper()}** {tier_emoji[team_info['tier']]}

üìä **ESTAT√çSTICAS:**
‚Ä¢ **Liga:** {team_info['league']} ({team_info['continent']})
‚Ä¢ **% de 0x0:** {team_info['zero_percent']}% (√∫ltimos 3 anos)
‚Ä¢ **Tier:** {team_info['tier'].capitalize()}

üí∞ **RECOMENDA√á√ÉO CASH OUT:**
‚Ä¢ **A√ß√£o:** {cash_out['recommendation']}
‚Ä¢ **Confian√ßa:** {cash_out['confidence']}
‚Ä¢ **Decis√£o:** {cash_out['action']}
‚Ä¢ **Risco:** {cash_out['risk_level']}
‚Ä¢ **Motivo:** {cash_out['reason']}

üéØ **STATUS "VEM DE UM 0X0":**
‚Ä¢ **Alert:** {zero_check['alert_level']}
‚Ä¢ **√öltimo jogo:** {zero_check.get('last_result', 'N/A')}
‚Ä¢ **Previs√£o:** {zero_check['next_game_prediction']}
        """
        
        if zero_check.get('coming_from_zero'):
            response += f"‚Ä¢ **Rating:** {zero_check['opportunity_rating']}\n"
            response += f"‚Ä¢ **√öltimo 0x0:** vs {zero_check['last_game']['opponent']} ({zero_check['last_game']['date']})\n"
            response += f"‚Ä¢ **Motivo:** {zero_check['reasoning']}\n"
        
        response += f"\nüí° **Pr√≥xima an√°lise:** `/analise [outra equipe]`"
        
        await update.message.reply_text(response, parse_mode='Markdown')

    async def opportunities_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Lista equipes que "v√™m de um 0x0" - OPORTUNIDADES"""
        
        opportunities = []
        for team_name in self.teams_data.keys():
            zero_check = self.check_coming_from_zero(team_name)
            if zero_check.get('coming_from_zero'):
                opportunities.append((team_name, zero_check))
        
        if not opportunities:
            response = """
üîç **OPORTUNIDADES "VEM DE UM 0X0"**

‚ùå **Nenhuma oportunidade detectada no momento**

‚ÑπÔ∏è **O que s√£o oportunidades?**
Equipes que raramente fazem 0x0 mas fizeram um na √∫ltima rodada.
Pela lei da aproxima√ß√£o √† m√©dia, tendem a N√ÉO repetir.

üîÑ **Status atualizado automaticamente**
Digite `/oportunidades` novamente mais tarde.
            """
        else:
            response = f"üö® **OPORTUNIDADES DETECTADAS** ({len(opportunities)} encontradas)\n\n"
            
            # Ordenar por rating (melhor primeiro)
            opportunities.sort(key=lambda x: x[1]['opportunity_rating'], reverse=True)
            
            for team_name, zero_check in opportunities:
                team_info = self.teams_data[team_name]
                tier_emoji = {"elite": "üëë", "premium": "‚≠ê", "standard": "üî∏"}
                
                response += f"{tier_emoji[team_info['tier']]} **{team_name}**\n"
                response += f"‚Ä¢ **Liga:** {team_info['league']} ({team_info['continent']})\n"
                response += f"‚Ä¢ **% hist√≥rica:** {team_info['zero_percent']}%\n"
                response += f"‚Ä¢ **Rating:** {zero_check['opportunity_rating']}\n"
                response += f"‚Ä¢ **√öltimo 0x0:** vs {zero_check['last_game']['opponent']} ({zero_check['last_game']['date']})\n"
                response += f"‚Ä¢ **Previs√£o:** {zero_check['next_game_prediction']}\n\n"
            
            response += "üí° **An√°lise detalhada:** `/analise [nome da equipe]`"
        
        await update.message.reply_text(response, parse_mode='Markdown')

    async def bundesliga_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """An√°lise especial da Bundesliga por per√≠odos de 15 minutos"""
        
        response = """
üá©üá™ **BUNDESLIGA - AN√ÅLISE POR PER√çODOS (2021-2024)**

üìä **PROBABILIDADES POR 15 MINUTOS:**

‚è∞ **0-15min:** 
‚Ä¢ 0x0: 8.2% | Over: 91.8%
‚Ä¢ üí° Per√≠odo mais seguro para Over

‚è∞ **15-30min:**
‚Ä¢ 0x0: 12.4% | Over: 87.6%  
‚Ä¢ üí° Ainda muito seguro

‚è∞ **30-45min:**
‚Ä¢ 0x0: 15.1% | Over: 84.9%
‚Ä¢ üí° Final do 1¬∫ tempo - aten√ß√£o

‚è∞ **45-60min:**
‚Ä¢ 0x0: 18.7% | Over: 81.3%
‚Ä¢ üü° In√≠cio do 2¬∫ tempo - cuidado

‚è∞ **60-75min:**
‚Ä¢ 0x0: 22.3% | Over: 77.7%
‚Ä¢ üü† Zona de risco aumentando

‚è∞ **75-90min:**
‚Ä¢ 0x0: 25.9% | Over: 74.1%
‚Ä¢ üî¥ Per√≠odo mais arriscado

üèÜ **EQUIPES BUNDESLIGA DISPON√çVEIS:**
        """
        
        # Filtrar equipes da Bundesliga
        bundesliga_teams = [(team, info) for team, info in self.teams_data.items() 
                           if info['league'] == 'Bundesliga']
        
        bundesliga_teams.sort(key=lambda x: x[1]['zero_percent'])
        
        for team, info in bundesliga_teams:
            tier_emoji = {"elite": "üëë", "premium": "‚≠ê", "standard": "üî∏"}
            response += f"{tier_emoji[info['tier']]} {team} - {info['zero_percent']}%\n"
        
        response += "\nüí° **An√°lise espec√≠fica:** `/analise [equipe alem√£]`"
        
        await update.message.reply_text(response, parse_mode='Markdown')

    async def continents_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Estat√≠sticas por continente"""
        
        # Agrupar por continente
        continents_stats = {}
        for team, info in self.teams_data.items():
            continent = info['continent']
            if continent not in continents_stats:
                continents_stats[continent] = {'teams': [], 'avg_zero': 0}
            continents_stats[continent]['teams'].append(info['zero_percent'])
        
        # Calcular m√©dias
        for continent in continents_stats:
            avg = sum(continents_stats[continent]['teams']) / len(continents_stats[continent]['teams'])
            continents_stats[continent]['avg_zero'] = round(avg, 1)
            continents_stats[continent]['count'] = len(continents_stats[continent]['teams'])
        
        response = "üåç **ESTAT√çSTICAS POR CONTINENTE**\n\n"
        
        # Ordenar por menor m√©dia de 0x0
        sorted_continents = sorted(continents_stats.items(), key=lambda x: x[1]['avg_zero'])
        
        continent_emojis = {
            'Europa': 'üá™üá∫',
            'Am√©rica do Sul': 'üáßüá∑', 
            'Am√©rica do Norte': 'üá∫üá∏',
            '√Åsia': 'üáØüáµ',
            '√Åfrica': 'üáøüá¶',
            'Oceania': 'üá¶üá∫'
        }
        
        for continent, stats in sorted_continents:
            emoji = continent_emojis.get(continent, 'üåç')
            response += f"{emoji} **{continent}**\n"
            response += f"‚Ä¢ **Equipes:** {stats['count']}\n"
            response += f"‚Ä¢ **M√©dia 0x0:** {stats['avg_zero']}%\n"
            response += f"‚Ä¢ **Qualidade:** {'Excelente' if stats['avg_zero'] < 4.0 else 'Muito Boa' if stats['avg_zero'] < 5.0 else 'Boa'}\n\n"
        
        response += "üí° **Ver equipes:** `/equipes`\n"
        response += "üîç **An√°lise:** `/analise [nome da equipe]`"
        
        await update.message.reply_text(response, parse_mode='Markdown')

    async def elite_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Top 15 equipes com menor % de 0x0"""
        
        # Ordenar todas as equipes por % de 0x0
        all_teams = [(team, info) for team, info in self.teams_data.items()]
        all_teams.sort(key=lambda x: x[1]['zero_percent'])
        
        response = "üëë **TOP 15 EQUIPES ELITE** (menor % de 0x0)\n\n"
        
        for i, (team, info) in enumerate(all_teams[:15], 1):
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i:2d}."
            tier_emoji = {"elite": "üëë", "premium": "‚≠ê", "standard": "üî∏"}
            
            response += f"{medal} {tier_emoji[info['tier']]} **{team}**\n"
            response += f"    {info['zero_percent']}% | {info['league']} ({info['continent']})\n\n"
        
        response += "üí° **An√°lise detalhada:** `/analise [nome da equipe]`\n"
        response += "üåç **Todas as equipes:** `/equipes`"
        
        await update.message.reply_text(response, parse_mode='Markdown')

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Manipulador de erros"""
        logger.error(f"Erro: {context.error}")
        
        if update and update.message:
            await update.message.reply_text(
                "‚ùå **Erro interno do bot**\n"
                "üîÑ Tente novamente em alguns segundos\n"
                "üí° Se persistir, use `/start` para reiniciar",
                parse_mode='Markdown'
            )

def main():
    """Fun√ß√£o principal - VERS√ÉO CORRIGIDA PARA RENDER.COM"""
    
    # Obter token do ambiente
    TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    if not TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN n√£o encontrado nas vari√°veis de ambiente!")
        sys.exit(1)
    
    logger.info("üöÄ Iniciando Bot de Monitoramento de Futebol...")
    
    # Criar inst√¢ncia do bot
    bot = GlobalFootballBot()
    
    # Criar aplica√ß√£o - USA APENAS POLLING PARA RENDER.COM
    application = Application.builder().token(TOKEN).build()
    
    # Registrar handlers
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(CommandHandler("equipes", bot.teams_command))
    application.add_handler(CommandHandler("analise", bot.analysis_command))
    application.add_handler(CommandHandler("oportunidades", bot.opportunities_command))
    application.add_handler(CommandHandler("bundesliga", bot.bundesliga_command))
    application.add_handler(CommandHandler("continentes", bot.continents_command))
    application.add_handler(CommandHandler("elite", bot.elite_command))
    
    # Handler de erro
    application.add_error_handler(bot.error_handler)
    
    logger.info(f"‚úÖ Bot carregado com {len(bot.teams_data)} equipes!")
    logger.info("üîÑ Iniciando polling...")
    
    # USAR APENAS POLLING - COMPAT√çVEL COM TODAS AS PLATAFORMAS
    try:
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True,
            poll_interval=1.0,
            timeout=10
        )
    except Exception as e:
        logger.error(f"‚ùå Erro ao iniciar polling: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
